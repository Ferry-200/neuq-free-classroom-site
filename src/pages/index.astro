---
import { getCollection } from "astro:content";
import buildInfo from "../build-info.json";

const buildMsg = buildInfo.message;

const lessonTime = [
  undefined,
  "08:00 ~ 08:45",
  "08:50 ~ 09:35",
  "10:05 ~ 10:50",
  "10:55 ~ 11:40",
  "14:00 ~ 14:45",
  "14:50 ~ 15:35",
  "16:05 ~ 16:50",
  "16:55 ~ 17:40",
  "18:40 ~ 19:25",
  "19:30 ~ 20:15",
  "20:25 ~ 21:10",
  "21:15 ~ 22:00",
];

const lessonType = {
  1: "morning",
  2: "morning",
  3: "morning",
  4: "morning",
  5: "afternoon",
  6: "afternoon",
  7: "afternoon",
  8: "afternoon",
  9: "evening",
  10: "evening",
  11: "evening",
  12: "evening",
};

const allData = await getCollection("free-classroom-data");

const dataList = allData
  .map((entry) => {
    const match = entry.id.match(/^gxg-(\d{4}-\d{1,2}-\d{1,2})-(\d+)-\2$/);
    if (!match) return null;

    const [_, date, lessonStr] = match;
    const lesson = parseInt(lessonStr);
    return {
      date,
      lesson,
      classrooms: new Set(
        entry
          .data
          .filter((value) => value.startsWith("工学馆"))
          .map((value) => value.replace("工学馆", "G"))
          .sort()
      ),
    };
  }).filter(Boolean)
    .sort((a, b) => a!.lesson - b!.lesson);

/** 1-8 节可用的教室 */
const allDayFree = dataList
  .slice(0, 8)
  .map((value) => value.classrooms)
  .reduce((prev, curr) => {
    if (!prev) return curr;
    return new Set([...prev].filter(x => curr.has(x)));
  });

const date = dataList[0].date;
---

<html lang="zh">

<head>
  <meta charset="UTF-8" />
  <title>工学馆空教室</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    .md-theme {
      --md-primary: #415f91;
      --md-on-primary: #ffffff;
      --md-primary-hover: rgba(255, 255, 255, 0.08);
      --md-primary-active: rgba(255, 255, 255, 0.12);
      --md-surface: #f9f9ff;
      --md-surface-container: #ededf4;
      --md-on-surface: #191c20;
      --md-secondary-container: #dae2f9;
      --md-on-secondary-container: #3e4759;
      --md-secondary-container-hover: rgba(62, 71, 89, 0.08);
      --md-secondary-container-active: rgba(62, 71, 89, 0.12);
      --md-outline: #74777f;
      --md-error: #ba1a1a;
      --md-error-container: #ffdad6;
      --md-on-error-container: #93000a;
    }

    @media (prefers-color-scheme: dark) {
      .md-theme {
        --md-primary: #aac7ff;
        --md-on-primary: #0a305f;
        --md-primary-hover: rgba(10, 48, 95, 0.08);
        --md-primary-active: rgba(10, 48, 95, 0.12);
        --md-surface: #111318;
        --md-surface-container: #1d2024;
        --md-on-surface: #e2e2e9;
        --md-secondary-container: #3e4759;
        --md-on-secondary-container: #dae2f9;
        --md-secondary-container-hover: rgba(218, 226, 249, 0.08);
        --md-secondary-container-active: rgb(218, 226, 249, 0.08);
        --md-outline: #8e9099;
        --md-error: #ffb4ab;
        --md-error-container: #93000a;
        --md-on-error-container: #ffdad6;
      }
    }

    body {
      margin: 0;
      font-family: sans-serif;
      padding: 1rem;
      background-color: var(--md-surface);
      color: var(--md-on-surface);
      /* Improve screenshot rendering */
      min-height: 100vh;
      position: relative;
    }

    html {
      /* Ensure proper screenshot capture */
      position: relative;
      min-height: 100%;
    }

    a {
      color: var(--md-primary);
    }

    .heading {
      margin-bottom: 1rem;
    }

    .help-msg {
      margin-top: 0.5rem;
      display: flex;
      align-items: start;
      flex-direction: column;
      gap: 0.8rem;
      font-size: 0.8rem;
    }

    .help-msg a {
      color: var(--md-error);
      font-weight: bold;
    }

    h1 {
      font-size: 1.5rem;
    }

    .card {
      margin-bottom: 1rem;
      border: 1px solid var(--md-outline);
      border-radius: 0.5rem;
      background: var(--md-surface-container);
    }

    summary {
      outline: none;
      cursor: pointer;
      font-weight: bold;
      font-size: 1rem;
      padding: 0.75rem;
    }

    .grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(3rem, 1fr));
      gap: 0.5rem;
      padding: 0 0.75rem 0.75rem 0.75rem;
    }

    .room {
      background: var(--md-secondary-container);
      color: var(--md-on-secondary-container);
      padding: 0.2rem;
      text-align: center;
      border-radius: 0.2rem;
      font-size: 0.9rem;
    }

    .clickable {
      position: relative;
      cursor: pointer;
    }

    .clickable::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border-radius: inherit;
      pointer-events: none;
      transition: background-color 150ms;
    }

    .clickable:hover::before {
      background-color: var(--md-secondary-container-hover);
    }

    .clickable:active::before {
      background-color: var(--md-secondary-container-active);
    }

    .room.new {
      font-weight: bold;
      text-decoration: underline wavy;
    }

    .room.soon-unavailable {
      font-weight: bold;
      color: var(--md-error);
    }

    .room.feedback-unavailable {
      font-weight: bold;
      color: var(--md-on-error-container);
      background-color: var(--md-error-container);
    }

    .footer {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      text-align: center;
      font-size: 0.9rem;
    }

    #feedback-dialog {
      display: none;
      position: fixed;
      z-index: 2;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      padding: 16px;
      border-radius: 16px;
      background-color: var(--md-surface-container);
      box-shadow: rgba(0, 0, 0, 0.2) 0px 3px 5px -1px, 
                  rgba(0, 0, 0, 0.14) 0px 6px 10px 0px, 
                  rgba(0, 0, 0, 0.12) 0px 1px 18px 0px;
    }

    #feedback-dialog * {
      margin: 0;
    }

    #feedback-scrim {
      display: none;
      position: fixed;
      left: 0;
      top: 0;
      z-index: 1;
      width: 100%;
      height: 100%;
      left: 0;
      top: 0;
    }

    #feedback-dialog .feedback-option button {
      border: none;
      background-color: var(--md-primary);
      color: var(--md-on-primary);
      height: 32px;
      border-radius: 16px;
      padding: 0 16px;

      position: relative;
      cursor: pointer;
    }

    #feedback-dialog .feedback-option {
      margin-top: 8px;
      display: flex;
      justify-content: end;
      gap: 8px;
    }

    #feedback-dialog .feedback-option button::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border-radius: inherit;
      pointer-events: none;
      transition: background-color 150ms;
    }

    #feedback-dialog .feedback-option button:hover::before {
      background-color: var(--md-primary-hover);
    }

    #feedback-dialog .feedback-option button:active::before {
      background-color: var(--md-primary-active);
    }

    /* Screenshot button styles */
    .screenshot-container {
      position: fixed;
      bottom: 20px;
      right: 20px;
      z-index: 10;
      /* Ensure proper rendering in screenshots */
      transform: translateZ(0);
      backface-visibility: hidden;
    }

    .screenshot-btn {
      background-color: var(--md-primary);
      color: var(--md-on-primary);
      border: none;
      border-radius: 28px;
      width: 56px;
      height: 56px;
      cursor: pointer;
      box-shadow: rgba(0, 0, 0, 0.2) 0px 3px 5px -1px, 
                  rgba(0, 0, 0, 0.14) 0px 6px 10px 0px, 
                  rgba(0, 0, 0, 0.12) 0px 1px 18px 0px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
      transition: background-color 150ms, transform 150ms;
      position: relative;
      /* Improve rendering consistency */
      transform: translateZ(0);
      backface-visibility: hidden;
    }

    .screenshot-btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border-radius: inherit;
      pointer-events: none;
      transition: background-color 150ms;
    }

    .screenshot-btn:hover::before {
      background-color: var(--md-primary-hover);
    }

    .screenshot-btn:active::before {
      background-color: var(--md-primary-active);
    }

    .screenshot-btn:hover {
      transform: scale(1.1);
    }

    .screenshot-btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }

    /* Share dialog styles */
    #share-dialog {
      display: none;
      position: fixed;
      z-index: 12;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      padding: 24px;
      border-radius: 16px;
      background-color: var(--md-surface-container);
      box-shadow: rgba(0, 0, 0, 0.2) 0px 3px 5px -1px, 
                  rgba(0, 0, 0, 0.14) 0px 6px 10px 0px, 
                  rgba(0, 0, 0, 0.12) 0px 1px 18px 0px;
      min-width: 320px;
      max-width: 90vw;
    }

    #share-dialog * {
      margin: 0;
    }

    #share-dialog h2 {
      margin-bottom: 16px;
      font-size: 1.25rem;
    }

    #share-scrim {
      display: none;
      position: fixed;
      left: 0;
      top: 0;
      z-index: 11;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
    }

    .share-options {
      display: flex;
      flex-direction: column;
      gap: 12px;
      margin-bottom: 16px;
    }

    .share-btn {
      background-color: var(--md-secondary-container);
      color: var(--md-on-secondary-container);
      border: none;
      border-radius: 8px;
      padding: 12px 16px;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 12px;
      transition: background-color 150ms;
      position: relative;
    }

    .share-btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border-radius: inherit;
      pointer-events: none;
      transition: background-color 150ms;
    }

    .share-btn:hover::before {
      background-color: var(--md-secondary-container-hover);
    }

    .share-btn:active::before {
      background-color: var(--md-secondary-container-active);
    }

    .dialog-actions {
      display: flex;
      justify-content: flex-end;
      gap: 8px;
    }

    .dialog-btn {
      border: none;
      background-color: var(--md-primary);
      color: var(--md-on-primary);
      height: 36px;
      border-radius: 18px;
      padding: 0 16px;
      cursor: pointer;
      position: relative;
      transition: background-color 150ms;
    }

    .dialog-btn.secondary {
      background-color: transparent;
      color: var(--md-primary);
    }

    .dialog-btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border-radius: inherit;
      pointer-events: none;
      transition: background-color 150ms;
    }

    .dialog-btn:hover::before {
      background-color: var(--md-primary-hover);
    }

    .dialog-btn:active::before {
      background-color: var(--md-primary-active);
    }

    .dialog-btn.secondary:hover::before {
      background-color: var(--md-primary-hover);
    }

    .dialog-btn.secondary:active::before {
      background-color: var(--md-primary-active);
    }

    .screenshot-preview {
      max-width: 100%;
      max-height: 200px;
      border-radius: 8px;
      margin: 12px 0;
    }

    /* Loading spinner */
    .loading-spinner {
      border: 2px solid var(--md-outline);
      border-top: 2px solid var(--md-primary);
      border-radius: 50%;
      width: 20px;
      height: 20px;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* Accessibility improvements */
    @media (prefers-reduced-motion: reduce) {
      .screenshot-btn,
      .dialog-btn,
      .share-btn {
        transition: none;
      }
      
      .screenshot-btn:hover {
        transform: none;
      }
      
      .loading-spinner {
        animation: none;
      }
    }

    /* Mobile responsive adjustments */
    @media (max-width: 768px) {
      .screenshot-container {
        bottom: 16px;
        right: 16px;
      }
      
      .screenshot-btn {
        width: 48px;
        height: 48px;
        font-size: 20px;
      }
      
      #share-dialog {
        margin: 16px;
        min-width: auto;
        max-width: calc(100vw - 32px);
      }
    }
  </style>
</head>

<body class="md-theme">
  <div class="heading">
    <h1>{date} 工学馆空教室</h1>
    <span>{buildMsg}</span>
    <div class="help-msg">
      <a href="/disclaimer">本服务与东北大学秦皇岛分校无直接关联</a>
      <span>
        <span class="room new">G000</span>
        ：同时间段<b>本节课起</b>空闲
      </span>
      <span>
        <span class="room soon-unavailable">G000</span>
        ：同时间段<b>本节课后</b>被占用
      </span>
      <span>
        <span class="room feedback-unavailable">G000(2)</span>
        ：有 2 条反馈表明 G000 在这个时间段被占用
      </span>
      <span>点击各节次空教室可以反馈教室占用情况</span>
    </div>
  </div>

  <details class="card">
    <summary>
      <span style="margin-left: 0.20rem;">第 1 - 8 节</span>
    </summary>

    <div class="grid">
      {
        allDayFree.size === 0
          ? (<p>无数据</p>)
          : (
            Array.from(allDayFree.values())
              .map((name) => (<div class="room" id=`1-8-${name}`>{name}</div>))
          )
      }
    </div>
  </details>

  {
    dataList.map(({lesson, classrooms}, i, arr) => (
      <details class="card">
        <summary>
          <span style="margin-left: 0.20rem;">
            第 {lesson} 节（{lessonTime[lesson]}）
          </span>
        </summary>

        <div class="grid lesson-room-grid">
          {
            classrooms.size === 0 
              ? (<p>无数据</p>) 
              : (Array.from(classrooms.values()).map((name) => {
                  const notFirst = i > 0;
                  const notLast = i < arr.length - 1;
                  const sameTypeWithLast = notFirst 
                    && lessonType[lesson] === lessonType[lesson - 1];
                  const sameTypeWithNext = notLast 
                    && lessonType[lesson] === lessonType[lesson + 1];
                  return (<div
                    id=`${lesson}-${name}`
                    class={[
                      "room", 
                      "clickable", 
                      sameTypeWithLast 
                        && (arr[i - 1].classrooms.has(name) ? undefined : "new"), 
                      sameTypeWithNext 
                        && (arr[i + 1].classrooms.has(name) ? undefined : "soon-unavailable")
                    ].filter(Boolean).join(" ")}>
                      {name}
                    </div>
                  );
              }))
          }
        </div>
      </details>
    ))
  }

  <div class="footer">
    <span>
      网站源码：
      <a href="https://github.com/Ferry-200/neuq-free-classroom-site">
        Ferry-200/neuq-free-classroom-site
      </a>
    </span>
    <span>
      数据来源：
      <a href="https://github.com/Ferry-200/neuq-free-classroom">
        Ferry-200/neuq-free-classroom
      </a>
    </span>
  </div>

  <div id="feedback-scrim"></div>
  <div id="feedback-dialog">
    <h1>这间教室被占用了吗</h1>
    <div class="feedback-option">
      <button type="button" id="feedback-option-yes">是</button>
      <button type="button" id="feedback-option-no">否</button>
    </div>
  </div>

  <!-- Screenshot capture button -->
  <div class="screenshot-container">
    <button type="button" 
            id="screenshot-btn" 
            class="screenshot-btn"
            title="截图分享页面"
            aria-label="截图分享页面">
      📸
    </button>
  </div>

  <!-- Share dialog -->
  <div id="share-scrim"></div>
  <div id="share-dialog" role="dialog" aria-labelledby="share-dialog-title" aria-modal="true">
    <h2 id="share-dialog-title">分享页面截图</h2>
    <div id="share-content">
      <!-- Preview image will be inserted here -->
    </div>
    <div class="share-options">
      <button type="button" class="share-btn" id="download-btn">
        💾 下载图片
      </button>
      <button type="button" class="share-btn" id="native-share-btn" style="display: none;">
        📤 分享图片
      </button>
      <button type="button" class="share-btn" id="copy-btn">
        📋 复制图片
      </button>
    </div>
    <div class="dialog-actions">
      <button type="button" class="dialog-btn secondary" id="close-share-dialog">关闭</button>
    </div>
  </div>

  <script>
    function sendFeedback(lesson, roomName, unavai) {
      fetch("https://classroom.ferry-music.fun/feedback", {
        method: "POST",
        headers: {
          "Content-Type": "application/json; charset=utf-8"
        },
        body: JSON.stringify({
          roomName: roomName,
          lesson: Number.parseInt(lesson),
          available: !unavai
        })
      }).then((res) => res.json()).then(console.log)
    }

    function toggleFeedbackDialog(open, lesson, roomName) {
      const dialog = document.getElementById("feedback-dialog")
      const dialogScrim = document.getElementById("feedback-scrim")
      dialog.style.display = open ? "block" : "none"
      dialogScrim.style.display = open ? "block" : "none"
      document.body.style.overflow = open ? "hidden" : "auto"
      if (open) {
        const dialogTitle = dialog.getElementsByTagName("h1")[0]
        if (dialogTitle) {
          dialogTitle.innerText = `${roomName} 在第 ${lesson} 节被占用了吗？`
        }

        const yesFeedbackBtn = document.getElementById("feedback-option-yes")
        yesFeedbackBtn
          .addEventListener("click", () => {
            sendFeedback(lesson, roomName, true)
            toggleFeedbackDialog(false)
          })

        const noFeedbackBtn = document.getElementById("feedback-option-no")
        noFeedbackBtn
          .addEventListener("click", () => {
            sendFeedback(lesson, roomName, false)
            toggleFeedbackDialog(false)
          })
      }
    }

    const roomGrids = document.getElementsByClassName('lesson-room-grid')
    for (const grid of roomGrids) {
      grid.addEventListener('click', (ev) => {
        if (ev.target.classList.contains('room')) {
          const splited = ev.target.id.split('-')
          if (splited.length !== 2) return

          toggleFeedbackDialog(true, splited[0], splited[1])
        }
      })
    }
  </script>

  <script>
    fetch("https://classroom.ferry-music.fun/feedback/summary").then(
      (res) => {
        if (!res.ok) return

        res.json().then((summary) => {
          if (!summary) return

          const allDaySummary = new Map()

          for (const feedback of summary) {
            const roomName = feedback['roomName']
            const lesson = feedback['section']
            const actualUnavailable = feedback['unavailable'] - feedback['available']
            if (actualUnavailable < 1) continue

            if (lesson < 9) {
              const memo = allDaySummary.get(roomName)
              allDaySummary.set(roomName, memo ? actualUnavailable + memo : actualUnavailable)
            }

            const roomEle = document.getElementById(`${lesson}-${roomName}`)
            if (roomEle) {
              roomEle.innerHTML = `${roomName}<br>(${actualUnavailable})`
              roomEle.classList.add('feedback-unavailable')
            }
          }

          const entries = allDaySummary.entries()
          for (const feedback of entries) {
            const roomEle = document.getElementById(`1-8-${feedback[0]}`)
            if (roomEle) {
              roomEle.innerHTML = `${feedback[0]}<br>(${feedback[1]})`
              roomEle.classList.add('feedback-unavailable')
            }
          }
        })
      }
    )
  </script>

  <!-- Screenshot capture functionality -->
  <script>
    // Import html2canvas dynamically to avoid build issues
    let html2canvas;
    
    /**
     * Dynamically loads html2canvas library if not already loaded
     * @returns {Promise} Promise that resolves when html2canvas is ready
     */
    async function loadHtml2Canvas() {
      if (!html2canvas) {
        try {
          const module = await import('html2canvas');
          html2canvas = module.default;
        } catch (error) {
          console.error('Failed to load html2canvas:', error);
          throw new Error('截图功能加载失败，请刷新页面重试');
        }
      }
      return html2canvas;
    }

    /**
     * Alternative screenshot capture with different configuration
     * @returns {Promise<HTMLCanvasElement>} Promise that resolves to canvas element
     */
    async function capturePageScreenshotFallback() {
      try {
        const html2canvasLib = await loadHtml2Canvas();
        
        // Hide screenshot button during capture
        const screenshotBtn = document.querySelector('.screenshot-container');
        const originalDisplay = screenshotBtn ? screenshotBtn.style.display : '';
        if (screenshotBtn) {
          screenshotBtn.style.display = 'none';
        }
        
        // Simpler configuration for better compatibility
        const options = {
          allowTaint: true,
          useCORS: true,
          height: window.innerHeight,
          width: window.innerWidth,
          scrollX: window.pageXOffset,
          scrollY: window.pageYOffset,
          scale: 1, // Use fixed scale to avoid issues
          backgroundColor: '#ffffff',
          removeContainer: true,
          onclone: (clonedDoc) => {
            // Remove problematic elements
            const problematicElements = clonedDoc.querySelectorAll('.screenshot-container, #share-dialog, #share-scrim, #feedback-dialog, #feedback-scrim');
            problematicElements.forEach(el => el.remove());
            
            // Ensure body is visible
            const body = clonedDoc.body;
            if (body) {
              body.style.overflow = 'visible';
              body.style.position = 'static';
            }
          }
        };

        const canvas = await html2canvasLib(document.body, options);
        
        // Restore screenshot button visibility
        if (screenshotBtn) {
          screenshotBtn.style.display = originalDisplay;
        }
        
        return canvas;
      } catch (error) {
        // Restore screenshot button visibility on error
        const screenshotBtn = document.querySelector('.screenshot-container');
        if (screenshotBtn) {
          screenshotBtn.style.display = '';
        }
        
        console.error('Fallback screenshot capture failed:', error);
        throw error;
      }
    }

    /**
     * Captures the entire visible page content as an image
     * @returns {Promise<HTMLCanvasElement>} Promise that resolves to canvas element
     */
    async function capturePageScreenshot() {
      try {
        const html2canvasLib = await loadHtml2Canvas();
        
        // Hide screenshot button during capture to avoid it appearing in screenshot
        const screenshotBtn = document.querySelector('.screenshot-container');
        const originalDisplay = screenshotBtn ? screenshotBtn.style.display : '';
        if (screenshotBtn) {
          screenshotBtn.style.display = 'none';
        }
        
        // Store current scroll position
        const scrollX = window.pageXOffset || document.documentElement.scrollLeft;
        const scrollY = window.pageYOffset || document.documentElement.scrollTop;
        
        // Configuration for optimal screenshot quality and alignment
        const options = {
          allowTaint: true,
          useCORS: true,
          scrollX: 0,
          scrollY: 0,
          x: 0,
          y: 0,
          width: Math.max(document.documentElement.scrollWidth, document.body.scrollWidth),
          height: Math.max(document.documentElement.scrollHeight, document.body.scrollHeight),
          scale: Math.min(window.devicePixelRatio || 1, 2), // Cap scale to avoid memory issues
          backgroundColor: getComputedStyle(document.documentElement).backgroundColor || 
                          getComputedStyle(document.body).backgroundColor || '#ffffff',
          ignoreElements: (element) => {
            // Ignore fixed positioned elements that might cause alignment issues
            const style = window.getComputedStyle(element);
            return style.position === 'fixed' && !element.closest('.screenshot-container');
          },
          onclone: (clonedDoc, element) => {
            // Ensure all styles are preserved and positioning issues are fixed
            const clonedBody = clonedDoc.body;
            const clonedHtml = clonedDoc.documentElement;
            
            if (clonedHtml) {
              clonedHtml.style.overflow = 'visible';
              clonedHtml.style.height = 'auto';
            }
            
            if (clonedBody) {
              clonedBody.style.overflow = 'visible';
              clonedBody.style.height = 'auto';
              clonedBody.style.position = 'static';
              clonedBody.style.transform = 'none';
            }
            
            // Remove any fixed positioned elements that might cause issues
            const fixedElements = clonedDoc.querySelectorAll('*');
            for (const el of fixedElements) {
              const computedStyle = clonedDoc.defaultView.getComputedStyle(el);
              if (computedStyle.position === 'fixed') {
                // Convert fixed elements to absolute positioning relative to their scroll position
                if (el.classList.contains('screenshot-container') || 
                    el.id === 'share-dialog' || 
                    el.id === 'share-scrim' ||
                    el.id === 'feedback-dialog' ||
                    el.id === 'feedback-scrim') {
                  el.style.display = 'none';
                } else {
                  el.style.position = 'absolute';
                  const rect = el.getBoundingClientRect();
                  el.style.top = (rect.top + scrollY) + 'px';
                  el.style.left = (rect.left + scrollX) + 'px';
                }
              }
            }
          }
        };

        const canvas = await html2canvasLib(document.documentElement, options);
        
        // Restore screenshot button visibility
        if (screenshotBtn) {
          screenshotBtn.style.display = originalDisplay;
        }
        
        return canvas;
      } catch (error) {
        // Try fallback method if main method fails
        console.warn('Primary screenshot method failed, trying fallback:', error);
        try {
          return await capturePageScreenshotFallback();
        } catch (fallbackError) {
          // Restore screenshot button visibility on error
          const screenshotBtn = document.querySelector('.screenshot-container');
          if (screenshotBtn) {
            screenshotBtn.style.display = '';
          }
          
          console.error('Both screenshot methods failed:', fallbackError);
          throw new Error('截图生成失败，请重试');
        }
      }
    }

    /**
     * Converts canvas to blob for sharing/downloading
     * @param {HTMLCanvasElement} canvas - The canvas element to convert
     * @param {string} format - Image format (default: 'image/png')
     * @param {number} quality - Image quality (0-1, default: 0.9)
     * @returns {Promise<Blob>} Promise that resolves to image blob
     */
    function canvasToBlob(canvas, format = 'image/png', quality = 0.9) {
      return new Promise((resolve, reject) => {
        canvas.toBlob((blob) => {
          if (blob) {
            resolve(blob);
          } else {
            reject(new Error('无法生成图片文件'));
          }
        }, format, quality);
      });
    }

    /**
     * Downloads the image blob as a file
     * @param {Blob} blob - Image blob to download
     * @param {string} filename - Filename for download
     */
    function downloadBlob(blob, filename) {
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = filename;
      link.style.display = 'none';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    }

    /**
     * Copies image blob to clipboard (modern browsers only)
     * @param {Blob} blob - Image blob to copy
     */
    async function copyBlobToClipboard(blob) {
      if (!navigator.clipboard || !window.ClipboardItem) {
        throw new Error('浏览器不支持复制图片功能');
      }

      try {
        const clipboardItem = new ClipboardItem({ [blob.type]: blob });
        await navigator.clipboard.write([clipboardItem]);
      } catch (error) {
        console.error('Failed to copy to clipboard:', error);
        throw new Error('复制到剪贴板失败');
      }
    }

    /**
     * Uses Web Share API to share the image (mobile browsers mainly)
     * @param {Blob} blob - Image blob to share
     */
    async function shareBlob(blob) {
      if (!navigator.share) {
        throw new Error('浏览器不支持原生分享功能');
      }

      try {
        const file = new File([blob], 'neuq-classroom-schedule.png', { type: blob.type });
        await navigator.share({
          title: '东北大学秦皇岛分校工学馆空教室',
          text: '分享工学馆空教室信息',
          files: [file]
        });
      } catch (error) {
        if (error.name !== 'AbortError') {
          console.error('Share failed:', error);
          throw new Error('分享失败');
        }
      }
    }

    /**
     * Shows loading state on button
     * @param {HTMLElement} button - Button element to show loading on
     * @param {boolean} loading - Whether to show loading state
     */
    function setButtonLoading(button, loading) {
      if (loading) {
        button.disabled = true;
        button.innerHTML = '<div class="loading-spinner"></div>';
      } else {
        button.disabled = false;
        button.innerHTML = '📸';
      }
    }

    /**
     * Shows/hides the share dialog
     * @param {boolean} show - Whether to show the dialog
     * @param {HTMLCanvasElement} canvas - Canvas element to preview (optional)
     */
    function toggleShareDialog(show, canvas = null) {
      const dialog = document.getElementById('share-dialog');
      const scrim = document.getElementById('share-scrim');
      const content = document.getElementById('share-content');
      
      if (show) {
        // Create preview image
        if (canvas) {
          const preview = document.createElement('img');
          preview.src = canvas.toDataURL();
          preview.className = 'screenshot-preview';
          preview.alt = '页面截图预览';
          content.innerHTML = '';
          content.appendChild(preview);
        }
        
        dialog.style.display = 'block';
        scrim.style.display = 'block';
        document.body.style.overflow = 'hidden';
        
        // Focus management for accessibility
        dialog.focus();
      } else {
        dialog.style.display = 'none';
        scrim.style.display = 'none';
        document.body.style.overflow = 'auto';
        content.innerHTML = '';
      }
    }

    /**
     * Shows error message to user
     * @param {string} message - Error message to display
     */
    function showError(message) {
      alert(message); // Simple error display - could be enhanced with custom modal
    }

    /**
     * Shows success message to user
     * @param {string} message - Success message to display
     */
    function showSuccess(message) {
      // Simple success feedback - could be enhanced with toast notifications
      const originalText = document.getElementById('screenshot-btn').title;
      const btn = document.getElementById('screenshot-btn');
      btn.title = message;
      setTimeout(() => {
        btn.title = originalText;
      }, 2000);
    }

    // Main screenshot capture logic
    let currentCanvas = null;

    document.getElementById('screenshot-btn').addEventListener('click', async () => {
      const button = document.getElementById('screenshot-btn');
      
      try {
        setButtonLoading(button, true);
        
        // Capture screenshot
        currentCanvas = await capturePageScreenshot();
        
        // Show share dialog
        toggleShareDialog(true, currentCanvas);
        
      } catch (error) {
        showError(error.message);
      } finally {
        setButtonLoading(button, false);
      }
    });

    // Share dialog event handlers
    document.getElementById('download-btn').addEventListener('click', async () => {
      if (!currentCanvas) return;
      
      try {
        const blob = await canvasToBlob(currentCanvas);
        const date = new Date().toISOString().slice(0, 10);
        downloadBlob(blob, `neuq-classroom-${date}.png`);
        showSuccess('下载成功！');
      } catch (error) {
        showError(error.message);
      }
    });

    document.getElementById('copy-btn').addEventListener('click', async () => {
      if (!currentCanvas) return;
      
      try {
        const blob = await canvasToBlob(currentCanvas);
        await copyBlobToClipboard(blob);
        showSuccess('已复制到剪贴板！');
      } catch (error) {
        showError(error.message);
      }
    });

    document.getElementById('native-share-btn').addEventListener('click', async () => {
      if (!currentCanvas) return;
      
      try {
        const blob = await canvasToBlob(currentCanvas);
        await shareBlob(blob);
      } catch (error) {
        showError(error.message);
      }
    });

    document.getElementById('close-share-dialog').addEventListener('click', () => {
      toggleShareDialog(false);
    });

    // Close dialog when clicking scrim
    document.getElementById('share-scrim').addEventListener('click', () => {
      toggleShareDialog(false);
    });

    // Keyboard navigation for accessibility
    document.addEventListener('keydown', (event) => {
      const dialog = document.getElementById('share-dialog');
      if (dialog.style.display === 'block') {
        if (event.key === 'Escape') {
          toggleShareDialog(false);
        }
      }
    });

    // Check for native share support and show/hide button accordingly
    if (navigator.share && navigator.canShare) {
      document.getElementById('native-share-btn').style.display = 'flex';
    }

    // Preload html2canvas for better performance (optional)
    setTimeout(() => {
      loadHtml2Canvas().catch(() => {
        // Silently fail - library will be loaded when needed
      });
    }, 2000);
  </script>
</body>

</html>
